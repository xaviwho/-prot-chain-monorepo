version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: protchain-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-protchain_prod}
      POSTGRES_USER: ${POSTGRES_USER:-protchain}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --data-checksums
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./protchain/internal/schema:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only expose locally
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-protchain} -d ${POSTGRES_DB:-protchain_prod}"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - protchain-network

  backend:
    build: 
      context: ./protchain
      dockerfile: Dockerfile.prod
    container_name: protchain-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-protchain}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-protchain_prod}?sslmode=disable
      JWT_SECRET: ${JWT_SECRET}
      PORT: 8080
      NODE_ENV: production
      LOG_LEVEL: info
    ports:
      - "127.0.0.1:8080:8080"  # Only expose locally, Nginx will proxy
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - protchain-network

  frontend:
    build:
      context: ./protchain-ui
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://protchain.co/api}
        NODE_ENV: production
    container_name: protchain-frontend
    environment:
      - NODE_ENV=production
    ports:
      - "127.0.0.1:3000:3000"  # Only expose locally, Nginx will proxy
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - protchain-network

  nginx:
    image: nginx:alpine
    container_name: protchain-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - protchain-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres  # Use this absolute path

networks:
  protchain-network:
    driver: bridge
    driver_opts:
      encrypted: ''
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.5.1
